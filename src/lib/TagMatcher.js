let regexToArray = (regex, delimiter = "|") => regex.toString().replace(/^\//, "").replace(/\/$/, "").split(delimiter);

// TODO Reimplement in YouTubeVideo class

class TagMatcher {
  // stores _id => matcher; _id is an autogenerated unique ID corresponding to the database ID.
  static matchers = new Map();

  static matchAll(string) {
    return [...this.matchers.values()].filter(m => m.match(string));
  }

  [Symbol.toPrimitive](hint) {
    if (hint === "string") return `TagMatcher("${this.tag}": ${this.regex.toString()})`;
  }

  constructor(server, {tag, regex, _id}) {
    this.server = server;

    this.regex = new RegExp(regex.join("|"), "i");
    this.tag = tag;
    this.id = _id;

    this.constructor.matchers.set(this.id, this);
  }  

  async save() {
    await this.server.db.collection("tag_matchers").replaceOne({_id: this.id}, {tag: this.tag, regex: regexToArray(this.regex)});
  }

  addMatcher(matcherRegex) {
    this.regex = new RegExp([...regexToArray(this.regex), matcherRegex].join("|"), "i");
  }
  removeMatcher(index) {
    let regex = regexToArray(this.regex);
    regex.splice(index, 1);
    this.regex = new RegExp(regex.join("|"), "i");
  }

  match(string) {
    return this.regex.test(string);
  }
}

module.exports = TagMatcher;